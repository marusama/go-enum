// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x36\x10\x7f\xb6\x3e\xc5\x55\x48\x07\xa9\x53\xe5\x0c\x7b\x6b\xe1\xa7\xb6\x0b\x5a\x20\x49\x81\x64\x7b\x09\x82\x80\x96\x4e\x36\x17\x89\x52\x49\xda\xb5\xa1\xe9\xbb\x0f\x47\x52\x32\x2d\xff\xc9\x36\x6c\x7b\x09\x2c\xde\xff\xdf\xef\x8e\xbc\xb4\xed\x5b\xc8\xb1\xe0\x02\x21\x5c\x22\xcb\x51\x86\x5d\x17\x4c\xa7\xf0\xa1\xce\x11\x16\x28\x50\x32\x8d\x39\xcc\xb7\xb0\xa8\xdf\xa2\x58\x55\x24\xfc\x78\x0b\x37\xb7\xf7\xf0\xe9\xe3\xe7\xfb\x57\x41\xd0\xb0\xec\x99\x2d\x10\xda\x36\x75\x3f\xbb\x2e\x08\x78\xd5\xd4\x52\x43\x14\x00\x00\x84\x45\xa5\xc3\x20\x0e\xda\x16\x45\x0e\x6f\x49\xee\x47\x26\xbf\x14\x37\xab\x85\x22\x13\x92\x5d\xd0\xe1\x0d\xab\x10\xde\xcd\x20\xa5\x8f\xd4\x7c\x91\xb1\x91\xaf\x99\x54\x24\xcb\x79\xa6\x21\x2c\x99\xd2\x75\x51\x28\xd4\x21\x5c\x3a\x25\x90\x4c\x2c\x10\x2e\xe4\x67\x91\xe3\x26\x21\x93\x72\xe5\xf9\xfb\x8d\x3e\x15\x74\x5d\x30\x31\x1e\xc9\xc7\xad\xf1\x41\x3a\x4d\xb9\xca\x9e\xf7\x1d\xdb\x98\x7f\x40\xc1\xa5\xd2\xd0\x75\x6d\x0b\x17\xf5\x60\xa0\x56\x73\x17\xc2\x7a\xee\x03\xbb\x00\xc0\x0b\xc0\x6f\xbd\x86\xa9\x25\x7c\x0a\xbb\x6e\x3a\x85\xbb\x67\xde\x34\x98\x83\x11\xb5\x2d\x96\x0a\xcd\x79\xdb\x3a\xed\xaf\x12\x0b\xbe\xc1\x9c\xac\xba\x0e\xb8\x02\x46\xc2\x1e\xa2\xae\x83\xba\x00\xbd\x6d\x70\x67\x62\xcf\x0d\xe0\x7d\x81\xbc\xe8\xa3\x7f\xa8\xab\x0a\x85\x26\x81\x1f\xc6\x3b\x26\x7d\x6b\x4a\xfc\x9d\x4a\x64\x57\x95\x2b\xf5\xd2\xa0\xe2\x27\x36\x03\x5e\x6b\x66\x15\x05\xc2\xe5\x80\x58\xd7\xc1\x8f\xe0\x21\x38\x24\x6b\x01\x70\xfa\x3e\x29\xbe\xe6\x61\x88\x93\xde\x2e\x9e\x0c\x3b\xe4\xc0\xf0\xb7\x4f\xa9\xfd\xe1\x9a\xca\x56\x1c\x53\x77\x82\xc6\xaa\x29\x99\x46\x08\x95\x96\x5c\x2c\x50\x86\x90\x12\x97\x34\x01\x5f\x99\x54\xd8\xb6\xbb\xbe\xec\x3a\x60\x9a\x4c\xb4\x02\x5d\x43\x56\x8b\x35\x4a\x0d\x0c\xac\x31\x9d\x11\x65\xbe\x41\x50\xac\x44\x76\xcc\x53\x24\xa8\x39\xac\x61\x0c\xd1\xbe\x30\x01\x94\xb2\x96\x31\xb4\xc1\x84\x17\xb0\x49\xa0\x7e\xa6\xfa\x9e\xf6\xd5\x4c\x07\x3e\x90\xa3\xc7\xf7\xa4\xd1\x06\x93\x89\x44\xbd\x92\x82\x4c\x04\x2f\x83\x89\x61\x99\x17\x90\x92\x96\x32\x33\xd3\xab\x8c\xf2\xb9\x8c\x13\x28\x2a\x9d\x7e\xa2\xc8\x45\x14\xbe\x56\xd4\x82\xa2\xa6\xfa\xd6\xac\xe4\x39\x8c\x73\xd4\x72\x0b\x0f\xaf\xd5\x63\x98\x00\x79\x4f\x5c\x35\x2a\xfd\x52\x73\x11\x8d\x72\xa5\xbf\x2a\x81\x30\x81\x30\x8e\x5d\xeb\x51\x07\xfc\x8b\x19\xb9\x3c\x62\xbf\xb1\xcd\x25\x44\x6d\x96\x56\x4c\xaa\x25\x2b\xc1\x5e\x7d\xd7\xf6\xeb\x1e\x37\x1a\x78\xd5\x94\x48\x33\xa1\x40\x2f\x11\x34\x9d\x39\xed\x12\x25\x54\xa8\x97\x75\x6e\x89\x8c\x36\xf0\x66\x3f\x68\xec\xbb\x8a\x62\x88\x1e\x1e\xe7\x5b\x8d\x3e\x83\xae\x3a\x2b\x88\x36\xe9\x9d\x81\x29\x8a\x63\xcb\x91\x6d\xb6\x5f\x45\xf5\x42\x4a\x2b\xf1\x37\x92\xda\x73\x17\x19\x7b\x1b\x3f\xb6\x89\x51\x5e\xc2\x5d\xbc\x96\x36\xa3\x14\x07\x13\x5d\x35\x26\x79\x92\x9c\xea\xdb\xd8\xb4\x25\x29\xbd\x9a\x51\x0d\x7e\xe7\xa1\x94\xa6\xed\xde\x6c\x60\x06\xba\x6a\x86\xfa\x6d\xad\xfd\x65\xd5\xd3\xf2\xbb\xaa\xc5\x3e\x27\x5f\xee\x6e\x6f\xc6\x00\x18\xad\xd3\xe5\x9f\xa0\x84\x3c\x9d\xa5\x84\xdc\xa6\x4e\xd9\x27\x66\xcc\xc9\xc9\x94\xfe\x19\x27\x26\xaf\xf9\x21\x21\x6b\x26\xc1\xbb\x16\x06\x90\xdf\xcd\x6c\xa6\x83\x83\x68\x9e\xc0\x0f\x86\x88\xf7\x2f\xb0\xf0\x3f\xb3\xa9\xbe\xf5\x03\x76\x97\x31\x31\x86\x8c\xce\x04\x4a\xe0\x42\xa3\x2c\x58\x86\xe9\x69\xb0\x48\x37\xb2\x6f\xf9\xa0\xde\x76\x67\xc0\x0a\x26\xea\x3b\xd7\xd9\x12\xd6\x54\xab\x7d\xc9\x22\x7a\x2e\x0d\xe1\x19\x53\xbd\xe6\xbb\x60\x62\x5b\x7f\x06\x6b\x27\xb0\x4c\x78\x02\x37\x12\xeb\xd8\x29\x08\x5e\x92\xd4\xa0\x70\x70\x4b\xed\xd0\x72\x57\xee\x7f\x0e\x3b\x01\x6c\xd7\x8f\x11\xc2\xb9\xe4\x6b\x94\x56\x76\x14\xe7\x31\xcc\x46\x93\x66\xc4\x5a\xda\xa5\xe6\xc8\xa4\xec\x86\x23\x39\x41\x7d\x51\xb2\x45\xcf\x3d\x1e\xdc\x60\x57\x75\xc9\xc4\x02\x48\xc9\x2d\x4e\x43\x72\x40\xb9\x9d\xeb\x04\xd4\xd4\x08\xc3\x5b\xb9\xeb\x80\xb3\x10\xaf\x59\x19\x3b\x00\xd7\x81\x8f\xab\x85\xef\xea\x7c\x8e\x57\xa8\xb5\x8f\xe0\x4b\x49\x5e\x21\x5d\xfe\x5e\xa7\x7a\xd8\xbd\xd9\xb8\x98\xf7\xb4\xbc\x8d\x82\x2e\xb8\x5e\xae\xe6\x69\x56\x57\x53\xd5\x14\x3f\xfd\x3c\x6d\x7e\x21\x20\x47\x18\x9d\x89\x4c\x4e\xa3\xb8\x5f\x41\x76\x51\xc3\xd1\xe3\xb8\x4f\x99\xfb\xb1\xb7\xa1\x0f\x2b\xd0\xb0\xa5\x1f\x79\xc3\x61\x46\x9e\x5d\x38\x5e\x6c\xed\x9a\x0d\x14\xa0\xef\x04\xbb\x6a\x74\x1d\x4d\xe8\xb1\x2d\xc0\xcc\x90\x60\xd5\x60\xed\xf6\xad\x63\xaa\xb6\x18\x5a\x85\x4b\xae\x34\x6d\xc0\x4d\xad\x14\x9f\x97\xfd\x34\xdb\x49\x57\x24\xd9\xb7\x77\x90\x1d\x71\x1a\xc5\xf0\xf0\xb8\xc3\x4b\x57\x0d\xf5\x50\xc5\x9e\x31\xea\xcf\x13\x28\xf1\xf8\x0a\x43\xcb\x4b\x56\x37\xdb\xc8\x8c\xf8\x51\x8d\x81\x02\x1a\x5c\xf3\x3f\xca\xf0\x0f\xd1\x11\x48\xae\x59\x63\x00\x81\x8a\x35\x3e\x9e\x06\x12\x3b\x74\x07\xf7\xa8\x23\xea\xaf\x0c\x78\x3f\xb6\x5e\x83\xf0\x82\x3e\x4e\xec\x94\xd7\xac\x79\xd8\x1c\xac\x93\x4a\xdb\xfb\xc8\x7d\xd2\x56\x76\xd7\x48\x2e\x74\x11\x8d\xfa\x2c\x7a\x9d\xc7\x61\x02\x1b\xf3\x86\x1e\x29\xd7\x36\xb6\x29\x98\x1e\x4f\xaf\xe4\xb4\xac\xbf\xa3\x34\xd7\xad\xdf\xa3\x7f\x06\x00\x00\xff\xff\xe7\x3a\x92\xf4\xbe\x0e\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3774, mode: os.FileMode(436), modTime: time.Unix(1543786765, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

