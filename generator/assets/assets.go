// Code generated by go-bindata. DO NOT EDIT.
// sources:
// enum.tmpl

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xc1\x6e\xe3\x36\x10\x3d\x9b\x5f\xf1\x56\xc8\x02\xd2\xd6\xb1\x53\xf4\xd6\xc2\xa7\xee\x36\xd8\x43\x36\x0b\x38\xed\x25\x58\x04\x8c\x35\x74\x88\x48\x94\x4a\xd1\xae\x02\x95\xff\x5e\x0c\x49\x2b\xb2\xb3\x5e\xf4\x26\x72\x66\xde\xcc\x7b\x33\x1c\x0d\xc3\x25\x4a\x52\xda\x10\xb2\x27\x92\x25\xd9\xcc\x7b\xb1\x5c\xe2\xf7\xa6\x24\x6c\xc9\x90\x95\x8e\x4a\x3c\xbe\x60\xdb\x5c\x92\xd9\xd5\x6c\xfc\x78\x8b\x2f\xb7\x77\xf8\xf4\xf1\xf3\xdd\x3b\x21\x5a\xb9\x79\x96\x5b\xc2\x30\x2c\xd2\xa7\xf7\x42\xe8\xba\x6d\xac\x43\x2e\x00\x20\x53\xb5\xcb\x44\x21\x86\x81\x4c\x89\x4b\xb6\x4f\x33\x33\x2e\xe7\xdd\x34\xa6\xe3\x10\xb6\x5d\xf0\xe5\x17\x59\x13\x7e\x5d\x61\xc1\x87\x45\x38\x71\x70\xb0\xef\xa5\xed\xd8\x56\xea\x8d\x43\x56\xc9\xce\x35\x4a\x75\xe4\x32\x5c\x25\x27\x58\x69\xb6\x84\x0b\xfb\xd9\x94\xd4\xcf\x39\xa4\xda\x4d\xf0\xfe\xe2\x63\x07\xef\xc5\x2c\x20\x32\xc6\x6d\xc0\x60\x9f\xb6\xda\x6d\x9e\x8f\x81\x63\xce\x7f\xa1\xb4\xed\x1c\xbc\x1f\x06\x5c\x34\x63\x40\xb7\x7b\x4c\x29\x22\xf2\x21\x71\x4a\x00\xad\x40\x7f\x1f\x3c\x02\x97\xec\x21\xf3\x7e\xb9\xc4\xfa\x59\xb7\x2d\x95\x08\xa6\x61\xa0\xaa\xa3\x70\x3f\x0c\xc9\xfb\xab\x25\xa5\x7b\x2a\x39\xca\x7b\xe8\x0e\x92\x8d\x07\x89\xbc\x47\xa3\xe0\x5e\x5a\x7a\x0d\x89\xf7\x41\x70\xef\x43\x13\xce\xa1\xbd\x96\x96\xea\xbd\x0a\xd4\xa6\xe8\x2b\xe8\xc6\xc9\xe8\x68\x08\x57\x23\x6d\xef\xf1\x13\x26\x32\x8c\x19\x23\x8b\xe4\x3f\x55\x76\xea\xf9\x36\xc5\x59\xb4\x8b\x87\x20\x31\x03\x84\x26\x1c\xf7\x25\x7e\xa4\xc9\x88\x8c\x0b\x1e\x31\x38\xaa\xdb\x4a\x3a\x42\xd6\x39\xab\xcd\x96\x6c\x86\x05\x37\x84\xc7\xf8\xab\xb4\x1d\x0d\xc3\xeb\x70\x79\x0f\xe9\x38\xc4\x75\x70\x0d\x36\x8d\xd9\x93\x75\x90\x88\xc1\x7c\xc7\xba\x4f\x03\x84\xda\x99\xcd\xf7\x90\x72\xc3\x1d\x8e\x81\x05\xf2\x63\xe3\x1c\x64\x6d\x63\x0b\x0c\x62\xa6\x15\xfa\x39\x9a\x67\xe6\xf7\x70\xec\x16\xc6\xe8\x9e\x81\xbe\xfd\xc6\x1e\x83\x98\xcd\x2c\xb9\x9d\x35\x27\x55\xe4\x7d\x31\x87\xd1\x95\x98\x79\x71\xc6\xe3\xaa\x98\x43\xd5\x6e\xf1\x89\x13\xab\x3c\x7b\xdf\xf1\x18\x99\x86\xe9\xed\x65\xa5\xcb\x93\x80\x6c\x0e\x4e\x5c\x88\xf0\x56\xb9\x91\x8b\x5a\xda\xee\x49\x56\x38\xb0\xce\x7b\x7c\x38\x0e\x2a\x70\x13\x7d\xee\xa8\x77\x79\x81\xfc\xfe\xdb\xe3\x8b\xa3\x29\xdd\x54\x5d\x34\xe4\xfd\x62\x1d\x14\xca\x8b\x44\xc0\x8b\xf3\xd8\x7f\x9a\x7a\x82\xee\xa8\x77\x09\xa6\x88\xf8\x0c\x6f\xd2\xc6\x88\xc2\x07\xa7\x42\xcc\x5c\xdd\x86\x1a\xd8\x72\xae\x57\x45\x68\x05\x3b\xbd\x5b\x71\x29\x53\xb5\xc9\xda\x20\xed\x87\x1e\x2b\xb8\xba\x1d\x69\xc4\x92\x0f\xaf\xec\x20\x94\xaa\xe4\x16\x71\x8f\xae\xc9\x41\xd7\x6d\x45\x35\x19\x9e\xaa\x27\xc2\x75\x53\x49\xb3\x05\x3b\xa5\x45\xa1\x8d\x23\xab\xe4\x86\xc0\xdc\xcf\x0b\xb0\x26\x97\xef\x65\x35\x4e\xd5\xc8\x7a\xff\x43\x76\x7b\x59\x15\xa9\xf6\xbd\x98\x52\x8a\xcf\xe0\xfa\xc7\x25\x5e\x93\x73\x64\xff\x77\x8d\xd7\xc4\x8d\x1f\xbd\x07\x3f\x69\xfa\x87\x3e\xa5\xbc\xe3\x55\x75\x92\x73\xab\xdd\xd3\xee\x71\xb1\x69\xea\x65\xd7\xaa\x9f\x7f\x59\xb6\x7f\xb0\x8c\xa7\x0a\x9d\xcf\xcc\xa0\x79\x71\x78\xab\xaf\x59\xb3\x93\xc1\x3e\x6e\x58\xfa\x38\xfa\x1f\x8d\xbb\x62\xfc\x27\x9d\x3c\xcc\xb0\xbd\x57\x8c\x9c\xd2\x69\xf5\x12\x7f\x2a\xe0\x04\x62\x2f\xed\x69\xc8\x8d\x6c\xb1\xe2\xe5\x56\xcb\x76\xea\x2d\x0e\x03\xaf\xf1\xa6\xdd\xe9\x69\x4c\x28\x69\xc5\x87\x33\xeb\xe2\x46\xb6\xf7\xfa\xcd\xa6\xe8\x9c\x9d\xae\x05\xde\x01\xeb\xd6\x6a\xe3\x54\x7e\xa2\x4c\xfe\xbe\x2c\xb2\x39\x74\x78\xf3\xdf\xa1\x10\x5b\x11\x48\xec\xcc\x11\x8d\x45\xd5\xfc\x43\x76\x23\x3b\xc2\x44\xd5\xff\x02\x00\x00\xff\xff\xb9\x0f\xfa\x99\x5d\x08\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 2141, mode: os.FileMode(420), modTime: time.Unix(1527267587, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0xaf, 0x48, 0x9, 0x7f, 0x5f, 0x1, 0x72, 0x46, 0xcc, 0x99, 0xc4, 0xcf, 0x32, 0x83, 0x28, 0xd7, 0x44, 0x51, 0xe9, 0x97, 0xa7, 0x2d, 0x6, 0x22, 0x47, 0x1b, 0x6f, 0xbc, 0x98, 0x75, 0x1f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
