// Code generated by go-bindata.
// sources:
// enum.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _enumTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x4d\x8f\xdb\x36\x13\x3e\x5b\xbf\x62\x22\x6c\x5e\x48\x79\x15\x79\x8b\xde\x12\xf8\x94\xa4\x8b\x04\x48\x36\xc0\x6e\x7b\x59\x2c\x02\x5a\x1a\xd9\xec\x4a\x94\x42\xd2\x8e\x0d\x55\xff\xbd\x18\x92\x92\x69\x59\x76\xda\x22\xed\x65\x61\x71\xbe\x9f\x67\x86\x9c\x6d\xdb\x97\x90\x63\xc1\x05\x42\xb8\x46\x96\xa3\x0c\xbb\x2e\x98\xcf\xe1\x4d\x9d\x23\xac\x50\xa0\x64\x1a\x73\x58\xee\x61\x55\xbf\x44\xb1\xa9\x48\xf8\xf6\x16\x3e\xdd\xde\xc3\xbb\xb7\xef\xef\x9f\x05\x41\xc3\xb2\x27\xb6\x42\x68\xdb\xd4\xfd\xec\xba\x20\xe0\x55\x53\x4b\x0d\x51\x00\x00\x10\x16\x95\x0e\x83\x38\x68\x5b\x14\x39\xbc\x24\xb9\x1f\x99\xfc\x52\xdc\xac\x16\x8a\x4c\x48\x76\x45\x87\x9f\x58\x85\xf0\x6a\x01\x29\x7d\xa4\xe6\x8b\x8c\x8d\x7c\xcb\xa4\x22\x59\xce\x33\x0d\x61\xc9\x94\xae\x8b\x42\xa1\x0e\xe1\xda\x29\x81\x64\x62\x85\x70\x25\xdf\x8b\x1c\x77\x09\x99\x94\x1b\xcf\xdf\x6f\xf4\xa9\xa0\xeb\x82\x99\xf1\x48\x3e\x6e\x8d\x0f\xd2\x69\xca\x4d\xf6\x74\xec\xd8\xc6\xfc\x03\x0a\x2e\x95\x86\xae\x6b\x5b\xb8\xaa\x07\x03\xb5\x59\xba\x10\xd6\x73\x1f\xd8\x05\x00\x5e\x00\x7e\xed\x35\x4c\x2d\xe1\x97\xb0\xeb\xe6\x73\xb8\x7b\xe2\x4d\x83\x39\x18\x51\xdb\x62\xa9\xd0\x9c\xb7\xad\xd3\xfe\x2c\xb1\xe0\x3b\xcc\xc9\xaa\xeb\x80\x2b\x60\x24\xec\x21\xea\x3a\xa8\x0b\xd0\xfb\x06\x0f\x26\xf6\xdc\x00\xde\x17\xc8\x8b\x3e\xfa\x9b\xba\xaa\x50\x68\x12\xf8\x61\xbc\x63\xd2\xb7\xa6\xc4\xdf\xb9\x44\x0e\x55\xb9\x52\xaf\x0d\x2a\x7e\x62\x0b\xe0\xb5\x66\x56\x51\x20\x5c\x0f\x88\x75\x1d\xfc\x1f\x3c\x04\x87\x64\x2d\x00\x4e\xdf\x27\xc5\xd7\x3c\x0d\x71\xd6\xdb\xd5\x17\xc3\x0e\x39\x30\xfc\x1d\x53\x6a\x7f\xb8\xa6\xb2\x15\xc7\xd4\x9d\xa0\xb1\x6a\x4a\xa6\x11\x42\xa5\x25\x17\x2b\x94\x21\xa4\xc4\x25\x4d\xc0\x67\x26\x15\xb6\xed\xa1\x2f\xbb\x0e\x98\x26\x13\xad\x40\xd7\x90\xd5\x62\x8b\x52\x03\x03\x6b\x4c\x67\x44\x99\x6f\x10\x14\x1b\x91\x4d\x79\x8a\x04\x35\x87\x35\x8c\x21\x3a\x16\x26\x80\x52\xd6\x32\x86\x36\x98\xf1\x02\x76\x09\xd4\x4f\x54\xdf\x97\x63\x35\xd3\x81\x0f\xe4\xe8\xf1\x35\x69\xb4\xc1\x6c\x26\x51\x6f\xa4\x20\x13\xc1\xcb\x60\x66\x58\xe6\x05\xa4\xa4\xa5\xcc\xcc\xf4\x2a\xa3\x7c\xae\xe3\x04\x8a\x4a\xa7\xef\x28\x72\x11\x85\xcf\x15\xb5\xa0\xa8\xa9\xbe\x2d\x2b\x79\x0e\xe3\x1c\xb5\xdc\xc3\xc3\x73\xf5\x18\x26\x40\xde\x13\x57\x8d\x4a\x3f\xd4\x5c\x44\xa3\x5c\xe9\xaf\x4a\x20\x4c\x20\x8c\x63\xd7\x7a\xd4\x01\x3f\x30\x23\x97\x47\xec\x37\xb6\xb9\x84\xa8\xcd\xd2\x8a\x49\xb5\x66\x25\xd8\xab\xef\xa3\xfd\xba\xc7\x9d\x06\x5e\x35\x25\xd2\x4c\x28\xd0\x6b\x04\x4d\x67\x4e\xbb\x44\x09\x15\xea\x75\x9d\x5b\x22\xa3\x1d\xbc\x38\x0e\x1a\xfb\xae\xa2\x18\xa2\x87\xc7\xe5\x5e\xa3\xcf\xa0\xab\xce\x0a\xa2\x5d\x7a\x67\x60\x8a\xe2\xd8\x72\x64\x9b\xed\x57\x51\x7d\x27\xa5\x8d\xf8\x1b\x49\x1d\xb9\x8b\x8c\xbd\x8d\x1f\xdb\xc4\x28\x2f\xe1\x2e\x5e\x4b\x9b\x51\x8a\x83\x99\xae\x1a\x93\x3c\x49\xce\xf5\x6d\x6c\xda\x92\x94\x9e\x2d\xa8\x06\xbf\xf3\x50\x4a\xd3\x76\x2f\x76\xb0\x00\x5d\x35\x43\xfd\xb6\xd6\xfe\xb2\xea\x69\xf9\x5d\xd5\xe2\x98\x93\x0f\x77\xb7\x9f\xc6\x00\x18\xad\xf3\xe5\x9f\xa1\x84\x3c\x5d\xa4\x84\xdc\xa6\x4e\xd9\x27\x66\xcc\xc9\xd9\x94\xfe\x19\x27\x26\xaf\xe5\x29\x21\x5b\x26\xc1\xbb\x16\x06\x90\x5f\x2d\x6c\xa6\x83\x83\x68\x99\xc0\xff\x0c\x11\xaf\xbf\xc3\xc2\x7f\xcc\xa6\xfa\xda\x0f\xd8\x5d\xc6\xc4\x18\x32\x3a\x13\x28\x81\x0b\x8d\xb2\x60\x19\xa6\xe7\xc1\x22\xdd\xc8\xbe\xe5\x83\x7a\xdb\x5d\x00\x2b\x98\xa9\x6f\x5c\x67\x6b\xd8\x52\xad\xf6\x25\x8b\xe8\xb9\x34\x84\x67\x4c\xf5\x9a\xaf\x82\x99\x6d\xfd\x05\x6c\x9d\xc0\x32\xe1\x09\xdc\x48\x6c\x63\xa7\x20\x78\x49\x52\x83\xc2\xc9\x2d\x75\x40\xcb\x5d\xb9\xff\x3a\xec\x04\xb0\x5d\x3f\x46\x08\xe7\x92\x6f\x51\x5a\xd9\x24\xce\x63\x98\x8d\x26\xcd\x88\xb5\xb4\x4b\xcd\xc4\xa4\x1c\x86\x23\x39\x43\x7d\x51\xb2\x55\xcf\x3d\x9e\xdc\x60\x37\x75\xc9\xc4\x0a\x48\xc9\x2d\x4e\x43\x72\x40\xb9\x5d\xea\x04\xd4\xd4\x08\xc3\x5b\x79\xe8\x80\x8b\x10\x6f\x59\x19\x3b\x00\xb7\x81\x8f\xab\x85\xef\xe6\x72\x8e\x37\xa8\xb5\x8f\xe0\xf7\x92\xbc\x41\xba\xfc\xbd\x4e\xf5\xb0\x7b\xb1\x73\x31\xef\x69\x79\x1b\x05\x5d\x71\xbd\xde\x2c\xd3\xac\xae\xe6\xaa\x29\x7e\xfa\x79\xde\xfc\x42\x40\x8e\x30\xba\x10\x99\x9c\x46\x71\xbf\x82\x1c\xa2\x86\xa3\xc7\xf1\x98\x32\xf7\xe3\x68\x43\x1f\x56\xa0\x61\x4b\x9f\x78\xc3\x61\x41\x9e\x5d\x38\x5e\xec\xed\x9a\x0d\x14\xa0\xef\x04\xbb\x6a\x74\x1d\x4d\xe8\xd4\x16\x60\x66\x48\xb0\x6a\xb0\x76\xfb\xd6\x94\xaa\x2d\x86\x56\xe1\x92\x2b\x4d\x1b\x70\x53\x2b\xc5\x97\x65\x3f\xcd\x76\xd2\x15\x49\x8e\xed\x1d\x64\x13\x4e\xa3\x18\x1e\x1e\x0f\x78\xe9\xaa\xa1\x1e\xaa\xd8\x13\x46\xfd\x79\x02\x25\x4e\xaf\x30\xb4\xbc\x64\x75\xb3\x8f\xcc\x88\x4f\x6a\x0c\x14\xd0\xe0\xda\xd2\x7e\x50\x31\x13\x03\x3c\x55\xd1\xe4\x3a\xe5\x14\x4d\x1b\xc0\xf0\x1f\xda\x04\x47\x1f\x59\x63\x18\x82\x8a\x35\x3e\xc1\xa6\x10\x7b\x0b\x9c\x5c\xec\xae\x73\xfe\xca\x8d\xd3\xdf\x23\x5e\xc7\xf2\x82\x3e\xce\x2c\xb9\x1f\x59\xf3\xb0\x3b\xd9\x6f\x95\xb6\x17\xa4\xfb\xa4\x35\xf1\xae\x91\x5c\xe8\x22\x1a\x35\x7e\xf4\x3c\x8f\xc3\x04\x76\xe6\x51\x9f\x28\xd7\x4e\x9a\x29\x98\x5e\x73\xaf\xe4\xb4\xac\xbf\xa1\x34\xf7\xbf\x3f\x34\x7f\x06\x00\x00\xff\xff\x6c\x3c\x3c\xac\x4f\x0f\x00\x00")

func enumTmplBytes() ([]byte, error) {
	return bindataRead(
		_enumTmpl,
		"enum.tmpl",
	)
}

func enumTmpl() (*asset, error) {
	bytes, err := enumTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "enum.tmpl", size: 3919, mode: os.FileMode(420), modTime: time.Unix(1544020858, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"enum.tmpl": enumTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"enum.tmpl": &bintree{enumTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

